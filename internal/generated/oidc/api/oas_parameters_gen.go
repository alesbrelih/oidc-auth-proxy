// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// OidcAuthGetParams is parameters of GET /oidc/auth operation.
type OidcAuthGetParams struct {
	// Session cookie for authentication.
	GoOidcAuthProxy OptString
}

func unpackOidcAuthGetParams(packed middleware.Parameters) (params OidcAuthGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "_go_oidc_auth_proxy",
			In:   "cookie",
		}
		if v, ok := packed[key]; ok {
			params.GoOidcAuthProxy = v.(OptString)
		}
	}
	return params
}

func decodeOidcAuthGetParams(args [0]string, argsEscaped bool, r *http.Request) (params OidcAuthGetParams, _ error) {
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _go_oidc_auth_proxy.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_go_oidc_auth_proxy",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGoOidcAuthProxyVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGoOidcAuthProxyVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.GoOidcAuthProxy.SetTo(paramsDotGoOidcAuthProxyVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_go_oidc_auth_proxy",
			In:   "cookie",
			Err:  err,
		}
	}
	return params, nil
}

// OidcCallbackGetParams is parameters of GET /oidc/callback operation.
type OidcCallbackGetParams struct {
	// Nonce for the request.
	GoOidcAuthProxyNounce OptString
	// State parameter for the request.
	GoOidcAuthProxyState OptString
	// State parameter for the request.
	State OptString
	// Code parameter for the request.
	Code OptString
}

func unpackOidcCallbackGetParams(packed middleware.Parameters) (params OidcCallbackGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "_go_oidc_auth_proxy_nounce",
			In:   "cookie",
		}
		if v, ok := packed[key]; ok {
			params.GoOidcAuthProxyNounce = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "_go_oidc_auth_proxy_state",
			In:   "cookie",
		}
		if v, ok := packed[key]; ok {
			params.GoOidcAuthProxyState = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "state",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.State = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "code",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Code = v.(OptString)
		}
	}
	return params
}

func decodeOidcCallbackGetParams(args [0]string, argsEscaped bool, r *http.Request) (params OidcCallbackGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	c := uri.NewCookieDecoder(r)
	// Decode cookie: _go_oidc_auth_proxy_nounce.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_go_oidc_auth_proxy_nounce",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGoOidcAuthProxyNounceVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGoOidcAuthProxyNounceVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.GoOidcAuthProxyNounce.SetTo(paramsDotGoOidcAuthProxyNounceVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_go_oidc_auth_proxy_nounce",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode cookie: _go_oidc_auth_proxy_state.
	if err := func() error {
		cfg := uri.CookieParameterDecodingConfig{
			Name:    "_go_oidc_auth_proxy_state",
			Explode: true,
		}
		if err := c.HasParam(cfg); err == nil {
			if err := c.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGoOidcAuthProxyStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGoOidcAuthProxyStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.GoOidcAuthProxyState.SetTo(paramsDotGoOidcAuthProxyStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "_go_oidc_auth_proxy_state",
			In:   "cookie",
			Err:  err,
		}
	}
	// Decode query: state.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "state",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStateVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStateVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.State.SetTo(paramsDotStateVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "state",
			In:   "query",
			Err:  err,
		}
	}
	// Decode query: code.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "code",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotCodeVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotCodeVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Code.SetTo(paramsDotCodeVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "code",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
